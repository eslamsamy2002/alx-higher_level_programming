The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Test cases on add integer file
First import ``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__("0-add_integer").add_integer

1 int arg-case:
    >>> add_integer(5)
    103

1 float arg-case:
    >>> add_integer(2.5)
    100

2 float arg-case:
    >>> add_integer(1.5, 2.5)
    3

2 int arg-case:
    >>> add_integer(1, 5)
    6

float overflow case:
    >>> add_integer(float('inf') , -float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: Float overflow: int too large to convert to float

None a:
    >>> add_integer(None, 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

None b:
    >>> add_integer(2, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

int, string arg-case:
    >>> add_integer(2, "e")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

string, int arg-case:
    >>> add_integer("e", 2)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

first negative:
    >>> add_integer(-5, 8)
    3

second negative:
    >>> add_integer(3, -1)
    2

booth negative:
    >>> add_integer(-2, -1)
    -3

a, b float negative:
    >>> add_integer(-3.5, -1.5)
    -4
